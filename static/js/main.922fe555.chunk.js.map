{"version":3,"sources":["algorithms/utils.ts","algorithms/compression.ts","visualization.tsx","compressors.tsx","Compare.tsx","algorithms/tikz.ts","visualizations/drawing.tsx","visualizations/Lz77Visualization.tsx","visualizations/RlzVisualization.tsx","visualizations/RelzVisualization.tsx","Slides.tsx","visualizations/common.ts","App.tsx","reportWebVitals.ts","index.tsx"],"names":["indexOfSubArray","array","subarray","outer","i","length","h","lastIndexOfSubArray","stringToCodePoints","input","result","codePoint","codePointAt","push","compressLz77","compressWithSlidingWindow","compressRlz","pos","phraseLength","lastOccurrence","currentPhrase","slice","currentOccurrence","type","symbol","l","p","windowSize","windowStart","Math","max","min","reference","rlz","compressRlzPrefix","prefixLength","prefixPhrases","suffixPhrases","phrase","relzMapping","symbolToPhraseMapping","Map","contentToSymbolMapping","mappedInput","getMapping","currentContent","content","isEqual","newMetaSymbol","size","set","extractLzLikeParsing","phrases","mapping","positionOffset","mappedPhrase","get","undefined","Error","mappedPos","sumBy","map","c","mappedLength","compressRelz","firstPassPhrases","metaSymbols","metaSymbolPhrases","compressRelzRecursive","recursionLimit","metaSymbolsPhrases","Character","props","style","display","width","height","border","textAlign","verticalAlign","lineHeight","character","VisualizePhrases","initialCompressorSettings","availableCompressors","lz77","title","needsReference","needsPrefixSize","needsWindowSize","needsRecursionLimit","relz","CompressorSettingEditor","update","settings","onChange","current","Card","Header","Body","Row","Col","value","e","parseInt","target","CompressorOutput","codePoints","phrasesToString","String","fromCodePoint","join","isNaN","referenceCodePoints","rlzPhrasesToString","Compare","useState","setInput","output","done","tikzRenderLz77","compressorType","setCompressorType","compressorSettings","setCompressorSettings","Container","lg","Dropdown","as","ButtonGroup","Button","onClick","Toggle","split","Menu","Item","idx","className","v","TARGET_COLOR","SOURCE_COLOR","SharedDefinitions","id","markerWidth","markerHeight","refX","refY","orient","points","gradientTransform","offset","Arrow","x1","x2","y","d","stroke","fill","Arrow2","y1","y2","straight","v1","v2","x","text","color","w","overflowY","userSelect","CurlyBrace","q","dx","dy","len","sqrt","qx1","qy1","qx2","qy2","tx1","ty1","qx3","qy3","qx4","qy4","path","ShortPhrase","transform","CopyingPhrase","abs","Lz77Visualization","arrowStart","arrowTarget","data","colors","Array","phrasePos","sum","take","shortPhrases","copyingPhrases","currentPos","forEach","char","RlzVisualization","referenceColors","RelzVisualization","finalStep","stepsCount","mappingArrows","metaArrowStart","metaArrowTarget","s","metaColors","currentMetaPhrase","backMappingArrows","currentMetaPos","zip","metaP","Slides","setCurrent","selectedCompressor","setSelectedCompressor","currentCompressor","referenceString","setReferenceString","setWindowSize","prefixSize","setPrefixSize","setRecursionLimit","computeData","useEffect","Form","Group","Label","Control","values","Check","label","name","checked","placeholder","md","disabled","App","Navbar","bg","variant","Brand","href","Nav","Link","to","exact","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","basename","document","getElementById"],"mappings":"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","file":"static/js/main.922fe555.chunk.js","sourcesContent":["export function indexOfSubArray<T>(array: T[], subarray: T[]): number {\n  outer: for (let i = 0; i <= array.length - subarray.length; i++) {\n    for (let h = 0; h < subarray.length; h++) {\n      if (array[i + h] !== subarray[h]) {\n        continue outer;\n      }\n    }\n    return i;\n  }\n\n  return -1;\n}\n\nexport function lastIndexOfSubArray<T>(array: T[], subarray: T[]): number {\n  outer: for (let i = array.length - subarray.length; i >= 0; i--) {\n    for (let h = 0; h < subarray.length; h++) {\n      if (array[i + h] !== subarray[h]) {\n        continue outer;\n      }\n    }\n    return i;\n  }\n\n  return -1;\n}\n\nexport function stringToCodePoints(input: string): number[] {\n  const result = [];\n\n  for (var i = 0; i < input.length; i++) {\n    var codePoint = input.codePointAt(i);\n\n    if (!codePoint) {\n      break;\n    }\n\n    result.push(codePoint);\n  }\n\n  return result;\n}\n\nexport function codePointsToString(...codePoints: number[]): string {\n  return String.fromCodePoint(...codePoints);\n}\n","import { indexOfSubArray, lastIndexOfSubArray } from \"./utils\";\nimport { isEqual, sumBy } from \"lodash\";\n\nexport type Phrase =\n  | {\n      type: \"literal\";\n      symbol: number;\n      l: 1;\n    }\n  | {\n      type: \"copy\";\n      p: number;\n      l: number;\n    };\n\nexport type RlzPhrase = { rlz: true } & (\n  | {\n      type: \"literal\";\n      symbol: number;\n      l: 1;\n    }\n  | {\n      type: \"copy\";\n      p: number;\n      l: number;\n    }\n);\n\nexport function* compressLz77(input: number[]): Generator<Phrase> {\n  let pos = 0;\n  while (pos < input.length) {\n    let phraseLength = 0;\n    let lastOccurrence = 0;\n    while (pos + phraseLength < input.length) {\n      let currentPhrase = input.slice(pos, pos + phraseLength + 1);\n      let currentOccurrence = lastIndexOfSubArray(\n        input.slice(0, pos + phraseLength),\n        currentPhrase\n      );\n      if (currentOccurrence !== -1) {\n        phraseLength++;\n        lastOccurrence = currentOccurrence;\n      } else {\n        break;\n      }\n    }\n\n    if (phraseLength === 0) {\n      yield { type: \"literal\", symbol: input[pos], l: 1 };\n      pos += 1;\n    } else {\n      yield { type: \"copy\", p: lastOccurrence, l: phraseLength };\n      pos += phraseLength;\n    }\n  }\n}\n\nexport function* compressWithSlidingWindow(\n  input: number[],\n  windowSize: number\n): Generator<Phrase> {\n  let pos = 0;\n  while (pos < input.length) {\n    let phraseLength = 0;\n    let lastOccurrence = 0;\n    while (pos + phraseLength < input.length) {\n      let currentPhrase = input.slice(pos, pos + phraseLength + 1);\n      const windowStart = Math.max(0, pos - windowSize);\n      let currentOccurrence = lastIndexOfSubArray(\n        input.slice(\n          windowStart,\n          Math.min(windowStart + windowSize, pos + phraseLength)\n        ),\n        currentPhrase\n      );\n      if (currentOccurrence !== -1) {\n        phraseLength++;\n        lastOccurrence = currentOccurrence + windowStart;\n      } else {\n        break;\n      }\n    }\n\n    if (phraseLength === 0) {\n      yield { type: \"literal\", symbol: input[pos], l: 1 };\n      pos += 1;\n    } else {\n      yield { type: \"copy\", p: lastOccurrence, l: phraseLength };\n      pos += phraseLength;\n    }\n  }\n}\n\nexport function decompress(phrases: Phrase[]): number[] {\n  let output: number[] = [];\n  for (const phrase of phrases) {\n    if (phrase.type === \"literal\") {\n      output.push(phrase.symbol);\n    } else {\n      for (let i = 0; i < phrase.l; i++) {\n        output.push(output[phrase.p + i]);\n      }\n    }\n  }\n\n  return output;\n}\n\nexport function* compressRlz(\n  input: number[],\n  reference: number[]\n): Generator<RlzPhrase> {\n  let pos = 0;\n  while (pos < input.length) {\n    let phraseLength = 0;\n    let lastOccurrence = 0;\n    while (pos + phraseLength < input.length) {\n      let currentPhrase = input.slice(pos, pos + phraseLength + 1);\n      let currentOccurrence = indexOfSubArray(reference, currentPhrase);\n      if (currentOccurrence !== -1) {\n        phraseLength++;\n        lastOccurrence = currentOccurrence;\n      } else {\n        break;\n      }\n    }\n\n    if (phraseLength === 0) {\n      yield { rlz: true, type: \"literal\", symbol: input[pos], l: 1 };\n      pos += 1;\n    } else {\n      yield { rlz: true, type: \"copy\", p: lastOccurrence, l: phraseLength };\n      pos += phraseLength;\n    }\n  }\n}\n\nexport function decompressRlz(\n  phrases: RlzPhrase[],\n  reference: number[]\n): number[] {\n  let output: number[] = [];\n  for (const phrase of phrases) {\n    if (phrase.type === \"literal\") {\n      output.push(phrase.symbol);\n    } else {\n      for (let i = 0; i < phrase.l; i++) {\n        output.push(reference[phrase.p + i]);\n      }\n    }\n  }\n\n  return output;\n}\n\nexport function compressRlzPrefix(\n  input: number[],\n  prefixLength: number\n): [Phrase[], Phrase[]] {\n  const prefixPhrases: Phrase[] = [];\n  const suffixPhrases: Phrase[] = [];\n  let pos = 0;\n  while (pos < input.length) {\n    let phraseLength = 0;\n    let lastOccurrence = 0;\n    while (pos + phraseLength < input.length) {\n      let currentPhrase = input.slice(pos, pos + phraseLength + 1);\n      let currentOccurrence = lastIndexOfSubArray(\n        input.slice(0, Math.min(pos, prefixLength)),\n        currentPhrase\n      );\n      if (currentOccurrence !== -1) {\n        phraseLength++;\n        lastOccurrence = currentOccurrence;\n      } else {\n        break;\n      }\n    }\n\n    if (phraseLength === 0) {\n      const phrase: Phrase = { type: \"literal\", symbol: input[pos], l: 1 };\n      if (pos < prefixLength) {\n        prefixPhrases.push(phrase);\n      } else {\n        suffixPhrases.push(phrase);\n      }\n      pos += 1;\n    } else {\n      const phrase: Phrase = {\n        type: \"copy\",\n        p: lastOccurrence,\n        l: phraseLength,\n      };\n      if (pos < prefixLength) {\n        prefixPhrases.push(phrase);\n      } else {\n        suffixPhrases.push(phrase);\n      }\n      pos += phraseLength;\n    }\n  }\n\n  return [prefixPhrases, suffixPhrases];\n}\n\nexport function relzMapping(\n  input: Phrase[],\n  reference: number[]\n): [Map<number, Phrase>, number[]] {\n  const symbolToPhraseMapping: Map<number, Phrase> = new Map();\n  const contentToSymbolMapping: [number[], number][] = [];\n  const mappedInput: number[] = [];\n\n  function getMapping(phrase: Phrase): number {\n    const currentContent =\n      phrase.type === \"literal\"\n        ? [phrase.symbol]\n        : reference.slice(phrase.p, phrase.p + phrase.l);\n    for (const [content, symbol] of contentToSymbolMapping) {\n      if (isEqual(content, currentContent)) {\n        return symbol;\n      }\n    }\n\n    const newMetaSymbol = symbolToPhraseMapping.size;\n    symbolToPhraseMapping.set(newMetaSymbol, phrase);\n    contentToSymbolMapping.push([currentContent, newMetaSymbol]);\n    return newMetaSymbol;\n  }\n\n  for (const phrase of input) {\n    mappedInput.push(getMapping(phrase));\n  }\n\n  return [symbolToPhraseMapping, mappedInput];\n}\n\nfunction extractLzLikeParsing(\n  phrases: Phrase[],\n  mapping: Map<number, Phrase>,\n  input: number[],\n  positionOffset: number\n): Phrase[] {\n  const result: Phrase[] = [];\n\n  for (let i = 0; i < phrases.length; i++) {\n    const phrase = phrases[i];\n    if (phrase.type === \"literal\") {\n      const mappedPhrase = mapping.get(phrase.symbol);\n      if (mappedPhrase === undefined) {\n        throw new Error(\"no mapping for symbol \" + phrase.symbol);\n      }\n      result.push(mappedPhrase);\n    } else {\n      const mappedPos =\n        sumBy(\n          input.slice(0, phrase.p).map((c) => mapping.get(c)),\n          (p) => p!.l\n        ) + positionOffset;\n      const mappedLength = sumBy(\n        input.slice(phrase.p, phrase.p + phrase.l).map((c) => mapping.get(c)),\n        (p) => p!.l\n      );\n      result.push({ type: \"copy\", p: mappedPos, l: mappedLength });\n    }\n  }\n\n  return result;\n}\n\ninterface RelzResult {\n  firstPassPhrases: Phrase[];\n  metaSymbols: number[];\n  metaSymbolPhrases: Phrase[];\n  phrases: Phrase[];\n}\n\nexport function compressRelz(\n  input: number[],\n  prefixLength: number\n): RelzResult {\n  const [prefixPhrases, suffixPhrases] = [\n    ...compressRlzPrefix(input, prefixLength),\n  ];\n  const firstPassPhrases = [...prefixPhrases, ...suffixPhrases];\n  const [mapping, metaSymbols] = relzMapping(firstPassPhrases, input);\n  const metaSymbolPhrases = [...compressLz77(metaSymbols)];\n  const resultPhrases = extractLzLikeParsing(\n    metaSymbolPhrases,\n    mapping,\n    metaSymbols,\n    0\n  );\n\n  return {\n    firstPassPhrases,\n    metaSymbols,\n    metaSymbolPhrases,\n    phrases: resultPhrases,\n  };\n}\n\nexport function compressRelzRecursive(\n  input: number[],\n  prefixLength: number,\n  recursionLimit: number | undefined = undefined\n): Phrase[] {\n  if (recursionLimit === 0) {\n    return input.map((c) => ({ type: \"literal\", symbol: c, l: 1 }));\n  }\n\n  const [prefixPhrases, suffixPhrases] = [\n    ...compressRlzPrefix(input, prefixLength),\n  ];\n  if (suffixPhrases.length > 0) {\n    const [mapping, metaSymbols] = relzMapping(\n      suffixPhrases,\n      input.slice(0, prefixLength)\n    );\n    const metaSymbolsPhrases = compressRelzRecursive(\n      metaSymbols,\n      prefixLength,\n      recursionLimit && recursionLimit - 1\n    );\n    return [\n      ...prefixPhrases,\n      ...extractLzLikeParsing(\n        metaSymbolsPhrases,\n        mapping,\n        metaSymbols,\n        prefixLength\n      ),\n    ];\n  } else {\n    return prefixPhrases;\n  }\n}\n","function Character(props: { character: string }) {\n  return (\n    <div\n      style={{\n        display: \"inline-block\",\n        width: \"30px\",\n        height: \"30px\",\n        border: \"1px solid black\",\n        textAlign: \"center\",\n        verticalAlign: \"middle\",\n        lineHeight: \"30px\",\n      }}\n    >\n      {props.character}\n    </div>\n  );\n}\n\nexport function VisualizePhrases(): JSX.Element {\n  return (\n    <div>\n      <Character character=\"A\"></Character>\n      <Character character=\"A\"></Character>\n    </div>\n  );\n}\n","import Card from \"react-bootstrap/Card\";\nimport Row from \"react-bootstrap/Row\";\nimport Col from \"react-bootstrap/Col\";\nimport { stringToCodePoints } from \"./algorithms/utils\";\nimport {\n  compressLz77,\n  compressRelz,\n  compressRelzRecursive,\n  compressRlz,\n  compressRlzPrefix,\n  compressWithSlidingWindow,\n  Phrase,\n  RlzPhrase,\n} from \"./algorithms/compression\";\nimport React from \"react\";\n\nimport {VisualizePhrases} from \"./visualization\"\n\nexport type CompressorType =\n  | \"lz77\"\n  | \"lz-sw\"\n  | \"rlz\"\n  | \"rlz-pref\"\n  | \"relz\"\n  | \"relz-rec\";\n\nexport type CompressorSettings =\n  | {\n      type: \"lz77\";\n    }\n  | {\n      type: \"lz-sw\";\n      windowSize?: number;\n    }\n  | {\n      type: \"rlz\";\n      reference: string;\n    }\n  | {\n      type: \"rlz-pref\";\n      prefixLength: number;\n    }\n  | {\n      type: \"relz\";\n      prefixLength: number;\n    }\n  | {\n      type: \"relz-rec\";\n      prefixLength: number;\n      recursionLimit?: number;\n    };\n\nexport function initialCompressorSettings(\n  type: CompressorType\n): CompressorSettings {\n  if (type === \"lz77\") {\n    return { type: \"lz77\" };\n  } else if (type === \"lz-sw\") {\n    return { type: \"lz-sw\", windowSize: 5 };\n  } else if (type === \"rlz\") {\n    return { type: \"rlz\", reference: \"\" };\n  } else if (type === \"rlz-pref\") {\n    return { type: \"rlz-pref\", prefixLength: 5 };\n  } else if (type === \"relz\") {\n    return { type: \"relz\", prefixLength: 5 };\n  } /* else if (type === \"relz-rec\") */ else {\n    return { type: \"relz-rec\", prefixLength: 5 };\n  }\n}\n\nexport interface Compressor {\n  type: CompressorType;\n  title: string;\n  needsReference: boolean;\n  needsPrefixSize: boolean;\n  needsWindowSize: boolean;\n  needsRecursionLimit: boolean;\n}\n\nexport const availableCompressors: { [type in CompressorType]: Compressor } = {\n  lz77: {\n    type: \"lz77\",\n    title: \"LZ77\",\n    needsReference: false,\n    needsPrefixSize: false,\n    needsWindowSize: false,\n    needsRecursionLimit: false,\n  },\n  \"lz-sw\": {\n    type: \"lz-sw\",\n    title: \"LZ with sliding window\",\n    needsReference: false,\n    needsPrefixSize: false,\n    needsWindowSize: true,\n    needsRecursionLimit: false,\n  },\n  rlz: {\n    type: \"rlz\",\n    title: \"RLZ\",\n    needsReference: true,\n    needsPrefixSize: false,\n    needsWindowSize: false,\n    needsRecursionLimit: false,\n  },\n  \"rlz-pref\": {\n    type: \"rlz-pref\",\n    title: \"RLZ using prefix\",\n    needsReference: false,\n    needsPrefixSize: true,\n    needsWindowSize: false,\n    needsRecursionLimit: false,\n  },\n  relz: {\n    type: \"relz\",\n    title: \"ReLZ\",\n    needsReference: false,\n    needsPrefixSize: true,\n    needsWindowSize: false,\n    needsRecursionLimit: false,\n  },\n  \"relz-rec\": {\n    type: \"relz-rec\",\n    title: \"Recursive ReLZ\",\n    needsReference: false,\n    needsPrefixSize: true,\n    needsWindowSize: false,\n    needsRecursionLimit: true,\n  },\n};\n\ninterface CompressorSettingsEditorProps {\n  current: CompressorSettings;\n  onChange?: (settings: CompressorSettings) => void;\n}\n\nexport function CompressorSettingEditor(\n  props: CompressorSettingsEditorProps\n): JSX.Element {\n  function update(settings: CompressorSettings) {\n    if (props.onChange) {\n      props.onChange(settings);\n    }\n  }\n\n  if (props.current.type === \"lz77\") {\n    return (\n      <Card>\n        <Card.Header>LZ77</Card.Header>\n        <Card.Body>no settings</Card.Body>\n      </Card>\n    );\n  } else if (props.current.type === \"lz-sw\") {\n    const windowSize = props.current.windowSize;\n    return (\n      <Card>\n        <Card.Header>LZ with sliding window</Card.Header>\n        <Card.Body>\n          <Row>\n            <Col>Window size:</Col>\n            <Col>\n              <input\n                type=\"number\"\n                min=\"0\"\n                value={windowSize}\n                onChange={(e) =>\n                  update({\n                    type: \"lz-sw\",\n                    windowSize: parseInt(e.target.value),\n                  })\n                }\n              ></input>\n            </Col>\n          </Row>\n        </Card.Body>\n      </Card>\n    );\n  } else if (props.current.type === \"rlz\") {\n    return (\n      <Card>\n        <Card.Header>Relative LZ</Card.Header>\n        <Card.Body>\n          <Row>\n            <Col>Reference:</Col>\n            <Col>\n              <input\n                value={props.current.reference}\n                onChange={(e) =>\n                  update({\n                    type: \"rlz\",\n                    reference: e.target.value,\n                  })\n                }\n              ></input>\n            </Col>\n          </Row>\n        </Card.Body>\n      </Card>\n    );\n  } else if (props.current.type === \"rlz-pref\") {\n    return (\n      <Card>\n        <Card.Header>RLZ with prefix</Card.Header>\n        <Card.Body>\n          <Row>\n            <Col>Prefix length:</Col>\n            <Col>\n              <input\n                value={props.current.prefixLength}\n                type=\"number\"\n                min=\"0\"\n                onChange={(e) =>\n                  update({\n                    type: \"rlz-pref\",\n                    prefixLength: parseInt(e.target.value),\n                  })\n                }\n              ></input>\n            </Col>\n          </Row>\n        </Card.Body>\n      </Card>\n    );\n  } else if (props.current.type === \"relz\") {\n    return (\n      <Card>\n        <Card.Header>ReLZ</Card.Header>\n        <Card.Body>\n          <Row>\n            <Col>Prefix length:</Col>\n            <Col>\n              <input\n                type=\"number\"\n                min=\"0\"\n                value={props.current.prefixLength}\n                onChange={(e) =>\n                  update({\n                    type: \"relz\",\n                    prefixLength: parseInt(e.target.value),\n                  })\n                }\n              ></input>\n            </Col>\n          </Row>\n        </Card.Body>\n      </Card>\n    );\n  } else if (props.current.type === \"relz-rec\") {\n    const { prefixLength, recursionLimit } = props.current;\n    return (\n      <Card>\n        <Card.Header>Recursive ReLZ</Card.Header>\n        <Card.Body>\n          <Row>\n            <Col>Prefix length:</Col>\n            <Col>\n              <input\n                type=\"number\"\n                min=\"0\"\n                value={props.current.prefixLength}\n                onChange={(e) =>\n                  update({\n                    type: \"relz-rec\",\n                    prefixLength: parseInt(e.target.value),\n                    recursionLimit,\n                  })\n                }\n              ></input>\n            </Col>\n          </Row>\n          <Row>\n            <Col>Recursion limit:</Col>\n            <Col>\n              <input\n                type=\"number\"\n                min=\"0\"\n                value={props.current.recursionLimit}\n                onChange={(e) =>\n                  update({\n                    type: \"relz-rec\",\n                    prefixLength,\n                    recursionLimit: parseInt(e.target.value),\n                  })\n                }\n              ></input>\n            </Col>\n          </Row>\n        </Card.Body>\n      </Card>\n    );\n  }\n\n  throw new Error(\"invalid compressor type\");\n}\n\ninterface CompressorOutputProps {\n  input: string;\n  settings: CompressorSettings;\n}\n\nexport function CompressorOutput(props: CompressorOutputProps): JSX.Element {\n  const codePoints = stringToCodePoints(props.input);\n\n  function phrasesToString(phrases: Phrase[]) {\n    return phrases.map((p) => {\n      if (p.type === \"copy\") {\n        return `(${p.p+1}, ${p.l})`;\n      } else {\n        const symbol = String.fromCodePoint(p.symbol);\n        return `(${symbol}, 0)`;\n      }\n    });\n  }\n\n  function rlzPhrasesToString(phrases: RlzPhrase[]) {\n    return phrases.map((p) => {\n      if (p.type === \"copy\") {\n        return `(${p.p+1}, ${p.l})`;\n      } else {\n        const symbol = String.fromCodePoint(p.symbol);\n        return `(${symbol}, 0)`;\n      }\n    });\n  }\n\n  if (props.settings.type === \"lz77\") {\n    const phrases = [...compressLz77(codePoints)];\n    return (\n      <Card style={{ height: \"100%\" }}>\n        <Card.Body>\n          <Row>\n            <Col>{phrasesToString(phrases).join(\", \")}</Col>\n          </Row>\n          <Row>\n            <Col>z = {phrases.length}</Col>\n          </Row>\n        </Card.Body>\n      </Card>\n    );\n  } else if (props.settings.type === \"lz-sw\") {\n    const { windowSize } = props.settings;\n    const phrases =\n      windowSize !== undefined && !isNaN(windowSize)\n        ? [...compressWithSlidingWindow(codePoints, windowSize)]\n        : undefined;\n    return (\n      <Card style={{ height: \"100%\" }}>\n        <Card.Body>\n          <Row>\n            <Col>\n                <VisualizePhrases></VisualizePhrases>\n            </Col>\n          </Row>\n          <Row>\n            <Col>{phrasesToString(phrases || []).join(\", \")}</Col>\n          </Row>\n          <Row>\n            <Col>z = {phrases?.length ?? \"?\"}</Col>\n          </Row>\n        </Card.Body>\n      </Card>\n    );\n  } else if (props.settings.type === \"rlz\") {\n    const { reference } = props.settings;\n    const referenceCodePoints = stringToCodePoints(reference);\n    const phrases = [...compressRlz(codePoints, referenceCodePoints)];\n    return (\n      <Card style={{ height: \"100%\" }}>\n        <Card.Body>\n          <Row>\n            <Col>{rlzPhrasesToString(phrases).join(\", \")}</Col>\n          </Row>\n          <Row>\n            <Col>\n              z = {phrases?.length ?? \"?\"} (+ {reference.length})\n            </Col>\n          </Row>\n        </Card.Body>\n      </Card>\n    );\n  } else if (props.settings.type === \"rlz-pref\") {\n    const { prefixLength } = props.settings;\n    const [prefixPhrases, suffixPhrases] = compressRlzPrefix(\n      codePoints,\n      prefixLength\n    );\n    const phrases = [...prefixPhrases, ...suffixPhrases];\n    return (\n      <Card style={{ height: \"100%\" }}>\n        <Card.Body>\n          <Row>\n            <Col>{phrasesToString(phrases).join(\", \")}</Col>\n          </Row>\n          <Row>\n            <Col>z = {phrases?.length ?? \"?\"}</Col>\n          </Row>\n        </Card.Body>\n      </Card>\n    );\n  } else if (props.settings.type === \"relz\") {\n    const { prefixLength } = props.settings;\n    const phrases = compressRelz(codePoints, prefixLength);\n    return (\n      <Card style={{ height: \"100%\" }}>\n        <Card.Body>\n          <Row>\n            <Col>{phrasesToString(phrases.phrases).join(\", \")}</Col>\n          </Row>\n          <Row>\n            <Col>z = {phrases?.phrases.length ?? \"?\"}</Col>\n          </Row>\n        </Card.Body>\n      </Card>\n    );\n  } else if (props.settings.type === \"relz-rec\") {\n    const { prefixLength, recursionLimit } = props.settings;\n    const phrases = compressRelzRecursive(\n      codePoints,\n      prefixLength,\n      recursionLimit\n    );\n    return (\n      <Card style={{ height: \"100%\" }}>\n        <Card.Body>\n          <Row>\n            <Col>{phrasesToString(phrases).join(\", \")}</Col>\n          </Row>\n          <Row>\n            <Col>z = {phrases?.length ?? \"?\"}</Col>\n          </Row>\n        </Card.Body>\n      </Card>\n    );\n  }\n\n  throw new Error(\"invalid compressor type\");\n}\n","import React, { useState } from \"react\";\n\nimport Button from \"react-bootstrap/Button\";\nimport Card from \"react-bootstrap/Card\";\nimport Container from \"react-bootstrap/Container\";\nimport Row from \"react-bootstrap/Row\";\nimport Col from \"react-bootstrap/Col\";\nimport { tikzRenderLz77 } from \"./algorithms/tikz\";\nimport { compressRlzPrefix } from \"./algorithms/compression\";\nimport { stringToCodePoints } from \"./algorithms/utils\";\nimport Dropdown from \"react-bootstrap/Dropdown\";\nimport ButtonGroup from \"react-bootstrap/ButtonGroup\";\nimport {\n  availableCompressors,\n  CompressorOutput,\n  CompressorSettingEditor,\n  CompressorSettings,\n  initialCompressorSettings,\n} from \"./compressors\";\n\ntype CompressorType =\n  | \"lz77\"\n  | \"lz-sw\"\n  | \"rlz\"\n  | \"rlz-pref\"\n  | \"relz\"\n  | \"relz-rec\";\n\nexport function Compare() {\n  const [input, setInput] = useState(\"AAABBBCCCC\");\n  // const phrases = [...compress(input)]\n  const codePoints = stringToCodePoints(input);\n  const [prefixPhrases, suffixPhrases] = compressRlzPrefix(codePoints, 4);\n  const phrases = [...prefixPhrases, ...suffixPhrases];\n  const tikz = tikzRenderLz77(input, phrases);\n  const [compressorType, setCompressorType] = useState<CompressorType>(\"lz77\");\n\n  const [compressorSettings, setCompressorSettings] = useState<\n    CompressorSettings[]\n  >([\n    initialCompressorSettings(\"lz77\"),\n    initialCompressorSettings(\"lz-sw\"),\n    initialCompressorSettings(\"rlz\"),\n    initialCompressorSettings(\"rlz-pref\"),\n    initialCompressorSettings(\"relz\"),\n    initialCompressorSettings(\"relz-rec\"),\n  ]);\n\n  function addCompressor() {\n    setCompressorSettings([\n      ...compressorSettings,\n      initialCompressorSettings(compressorType),\n    ]);\n  }\n\n  return (\n    <>\n      <Container>\n        <Row>\n          <Col>\n            <Card>\n              {/* <Card.Body>\n                {phrases\n                  .map((p) => {\n                    if (p.type === \"copy\") {\n                      return `(${p.p+1}, ${p.l})`;\n                    } else {\n                      return `(${p.symbol}, 0)`;\n                    }\n                  })\n                  .join(\" \")}\n              </Card.Body> */}\n            </Card>\n          </Col>\n        </Row>\n        <Row>\n          <Col>\n            <Card>\n              <Card.Body>\n                Input:{\" \"}\n                <input\n                  type=\"text\"\n                  onChange={(e) => setInput(e.target.value)}\n                  value={input}\n                ></input>\n              </Card.Body>\n            </Card>\n          </Col>\n        </Row>\n        <Row>\n          <Col lg=\"6\">\n            <Row>\n              <Col>\n                <h1>Compressors</h1>\n              </Col>\n              <Col>\n                <Dropdown as={ButtonGroup}>\n                  <Button onClick={addCompressor}>\n                    {\"Add \" + availableCompressors[compressorType].title}\n                  </Button>\n\n                  <Dropdown.Toggle split />\n\n                  <Dropdown.Menu>\n                    <Dropdown.Item onClick={() => setCompressorType(\"lz77\")}>\n                      LZ\n                    </Dropdown.Item>\n                    <Dropdown.Item onClick={() => setCompressorType(\"lz-sw\")}>\n                      LZ with sliding window{\" \"}\n                    </Dropdown.Item>\n                    <Dropdown.Item onClick={() => setCompressorType(\"rlz\")}>\n                      {\" \"}\n                      RLZ\n                    </Dropdown.Item>\n                    <Dropdown.Item onClick={() => setCompressorType(\"rlz-pref\")}>\n                      RLZ with prefix\n                    </Dropdown.Item>\n                    <Dropdown.Item onClick={() => setCompressorType(\"relz\")}>\n                      ReLZ\n                    </Dropdown.Item>\n                    <Dropdown.Item\n                      onClick={() => setCompressorType(\"relz-rec\")}\n                    >\n                      Recursive ReLZ\n                    </Dropdown.Item>\n                  </Dropdown.Menu>\n                </Dropdown>\n              </Col>\n            </Row>\n          </Col>\n          <Col lg=\"6\">\n            <h1>Outputs</h1>\n          </Col>\n        </Row>\n\n        {compressorSettings.map((settings, idx) => (\n          <Row className=\"mt-3\">\n            <Col lg=\"6\">\n              <CompressorSettingEditor\n                current={settings}\n                onChange={settings => setCompressorSettings(compressorSettings.map((v, i) => idx === i ? settings : v))}\n              ></CompressorSettingEditor>\n            </Col>\n            <Col lg=\"6\">\n              <CompressorOutput settings={settings} input={input}></CompressorOutput>\n            </Col>\n          </Row>\n        ))}\n      </Container>\n    </>\n  );\n}\n","import { Phrase } from \"./compression\";\n\nexport function tikzRenderLz77(input: string, phrases: Phrase[]): string {\n  let output = `\\\\begin{tabular}{c c c}\n    \\\\toprule\n    $i$ & Input    & $f_i = (p_i, l_i)$ \\\\\\\\\n    \\\\midrule\n    & \n    \\\\begin{tikzpicture}[baseline=-2]\n`;\n\n  for (let i = 0; i < input.length; i++) {\n    output += `        \\\\node[index] (${i + 1})`;\n    if (i > 0) {\n      output += ` [right of=${i}]`;\n    }\n    output += ` {${i + 1}};\\n`;\n  }\n  output += `    \\\\end{tikzpicture}\n    & \\\\\\\\\n`;\n\n  let done = 0;\n  for (let i = 0; i < phrases.length; i++) {\n    const phrase = phrases[i];\n    output += `    ${i + 1} &\n        \\\\begin{tikzpicture}[baseline=-2]\n`;\n    for (let h = 0; h < input.length; h++) {\n      output += `            \\\\node[squarednode`;\n      if (h < done) {\n        output += \", used\";\n      }\n      output += `] (${h + 1})`;\n      if (h > 0) {\n        output += ` [right of=${h}]`;\n      }\n      output += ` {${input[h]}};\\n`;\n    }\n\n    output += \"            \\\\node[fit=\";\n    for (let h = 0; h < phrase.l; h++) {\n      output += `(${done + h + 1})`;\n    }\n    output += \", current]{};\\n\";\n\n    output += `            \\\\addvmargin{1mm};\n        \\\\end{tikzpicture}\n            & `;\n\n    if (phrase.type === \"literal\") {\n      output += `(${phrase.symbol}, 0) \\\\\\\\\\n`;\n    } else {\n      output += `(${phrase.p + 1}, ${phrase.l}) \\\\\\\\\\n`;\n    }\n\n    done += phrase.l;\n  }\n  output += `    \\\\bottomrule\n\\\\end{tabular}\n    `;\n\n  return output;\n}\n","const TARGET_COLOR = \"#E1BE6A\"\nconst SOURCE_COLOR = \"#40B0A6\"\n\nexport function SharedDefinitions() {\n  return (\n    <defs>\n      <marker\n        id=\"arrowhead\"\n        markerWidth=\"100\"\n        markerHeight=\"7\"\n        refX=\"9\"\n        refY=\"3.5\"\n        orient=\"auto\"\n      >\n        <polygon points=\"0 0, 10 3.5, 0 7\" />\n      </marker>\n\n      <linearGradient id=\"split-color\" gradientTransform=\"rotate(45)\">\n        <stop offset=\"75%\" stop-color={TARGET_COLOR} />\n        <stop offset=\"75%\" stop-color={SOURCE_COLOR} />\n      </linearGradient>\n    </defs>\n  );\n}\n\nexport interface ArrowProps {\n  x1: number;\n  x2: number;\n  y: number;\n}\n\nexport function Arrow(props: ArrowProps) {\n  const { x1, x2, y } = props;\n  const l = x2 - x1;\n  return (\n    <path\n      d={`M ${x1} ${y} v -20 h ${l} v 19`}\n      marker-end=\"url(#arrowhead)\"\n      stroke=\"black\"\n      fill=\"none\"\n    />\n  );\n}\n\nexport interface ArrowProps2 {\n  x1: number;\n  y1: number;\n  x2: number;\n  y2: number;\n  straight?: boolean;\n}\n\nexport function Arrow2(props: ArrowProps2) {\n  const { x1, y1, x2, y2, straight } = props;\n\n  if (straight) {\n    const v1 = y1 < y2 ? 20 : -20;\n    const v2 = y1 < y2 ? 20 : -20;\n\n    return (\n      <path\n        d={`M ${x1} ${y1} v ${v1} L ${x2} ${y2-20} v ${v2}`}\n        marker-end=\"url(#arrowhead)\"\n        stroke=\"black\"\n        fill=\"none\"\n      />\n    );\n  } else {\n    const l = x2 - x1;\n    const h = (y2 - y1) / 2;\n\n    const v1 = y2 < y1 ? h : -h;\n    const v2 = y2 < y1 ? h : -h;\n    return (\n      <path\n        d={`m ${x1} ${y1} v ${v1} h ${l} v ${v2}`}\n        marker-end=\"url(#arrowhead)\"\n        stroke=\"black\"\n        fill=\"none\"\n      />\n    );\n  }\n}\n\nexport type CharacterColor = \"none\" | \"source\" | \"target\" | \"source-target\";\n\nexport interface CharacterProps {\n  x: number;\n  y: number;\n  w?: number;\n  h?: number;\n  text: string;\n  color?: CharacterColor;\n}\n\nexport function Character(props: CharacterProps) {\n  const { x, y, text, color } = props;\n  const w = props.w || 30;\n  const h = props.h || 30;\n  const fill =\n    color === \"source\"\n      ? SOURCE_COLOR\n      : color === \"target\"\n      ? TARGET_COLOR\n      : color === \"source-target\"\n      ? \"url(#split-color)\"\n      : \"none\";\n  return (\n    <>\n      <rect x={x} y={y} width={w} height={h} fill={fill} stroke=\"black\" />\n      <foreignObject x={x} y={y} width={w} height={h}>\n        <div\n          style={{\n            //   width: \"30px\",\n            //   height: \"30px\",\n            overflowY: \"auto\",\n            textAlign: \"center\",\n            verticalAlign: \"middle\",\n            lineHeight: `${h}px`,\n            userSelect: \"none\",\n          }}\n        >\n          {text}\n        </div>\n      </foreignObject>\n    </>\n  );\n}\n\nexport interface CurlyBraceProps {\n  x1: number;\n  y1: number;\n  x2: number;\n  y2: number;\n  w: number;\n  q: number;\n}\n\nexport function CurlyBrace(props: CurlyBraceProps) {\n  const { x1, y1, x2, y2, w, q } = props;\n  var dx = x1 - x2;\n  var dy = y1 - y2;\n  var len = Math.sqrt(dx * dx + dy * dy);\n  dx = dx / len;\n  dy = dy / len;\n\n  //Calculate Control Points of path,\n  const qx1 = x1 + q * w * dy;\n  const qy1 = y1 - q * w * dx;\n  const qx2 = x1 - 0.25 * len * dx + (1 - q) * w * dy;\n  const qy2 = y1 - 0.25 * len * dy - (1 - q) * w * dx;\n  const tx1 = x1 - 0.5 * len * dx + w * dy;\n  const ty1 = y1 - 0.5 * len * dy - w * dx;\n  const qx3 = x2 + q * w * dy;\n  const qy3 = y2 - q * w * dx;\n  const qx4 = x1 - 0.75 * len * dx + (1 - q) * w * dy;\n  const qy4 = y1 - 0.75 * len * dy - (1 - q) * w * dx;\n\n  const path = `M ${x1} ${y1} Q ${qx1} ${qy1} ${qx2} ${qy2} T ${tx1} ${ty1} M ${x2} ${y2} Q ${qx3} ${qy3} ${qx4} ${qy4} T ${tx1} ${ty1}`;\n\n  return <path d={path} stroke=\"black\" fill=\"none\"></path>;\n}\n\nexport interface ShortPhraseProps {\n  x: number;\n  y: number;\n  text: string;\n}\n\nexport function ShortPhrase(props: ShortPhraseProps) {\n  const { x, y, text } = props;\n  return (\n    <foreignObject x={x} y={y} width=\"60\" height=\"40\">\n      <div\n        style={{\n          //   width: \"30px\",\n          //   height: \"30px\",\n          overflowY: \"auto\",\n          textAlign: \"center\",\n          verticalAlign: \"middle\",\n          lineHeight: \"40px\",\n          userSelect: \"none\",\n          transform: \"rotate(-45deg)\",\n        }}\n      >\n        {text}\n      </div>\n    </foreignObject>\n  );\n}\n\nexport interface CopyingPhraseProps {\n  x1: number;\n  x2: number;\n  y: number;\n  p: number;\n  l: number;\n  w?: number;\n}\n\nexport function CopyingPhrase(props: CopyingPhraseProps) {\n  const { x1, x2, y, p, l } = props;\n  const w = props.w ?? 50;\n\n  return (\n    <>\n      <CurlyBrace x1={x1} x2={x2} y1={y} y2={y} w={10} q={0.6}></CurlyBrace>\n      <foreignObject\n        x={x1 + Math.abs(x2 - x1) / 2 - w / 2}\n        y={y}\n        width={w}\n        height=\"40\"\n      >\n        <div\n          style={{\n            //   width: \"30px\",\n            //   height: \"30px\",\n            overflowY: \"auto\",\n            textAlign: \"center\",\n            verticalAlign: \"middle\",\n            lineHeight: \"40px\",\n            userSelect: \"none\",\n          }}\n        >\n          {`(${p}, ${l})`}\n        </div>\n      </foreignObject>\n    </>\n  );\n}\n","import { sum, take } from \"lodash\";\nimport React from \"react\";\nimport { Phrase } from \"../algorithms/compression\";\nimport { Lz77VisualizationData } from \"./common\";\nimport {\n  Arrow,\n  Character,\n  CharacterColor,\n  CopyingPhrase,\n  CopyingPhraseProps,\n  SharedDefinitions,\n  ShortPhrase,\n  ShortPhraseProps,\n} from \"./drawing\";\n\nexport interface Lz77VisualizationProps {\n  data: Lz77VisualizationData;\n  currentPhrase?: number;\n}\n\nexport function Lz77Visualization(props: Lz77VisualizationProps) {\n  const { data, currentPhrase } = props;\n  const { input, phrases } = data;\n\n  const colors: CharacterColor[] = new Array(input.length).fill(\"none\");\n  let arrowStart: number | undefined;\n  let arrowTarget: number | undefined;\n  if (currentPhrase !== undefined && currentPhrase < phrases.length) {\n    const phrase = phrases[currentPhrase];\n    if (phrase.type === \"copy\") {\n      for (let i = 0; i < phrase.l; i++) {\n        colors[phrase.p + i] = \"source\";\n      }\n      arrowTarget = phrase.p;\n    }\n    const phrasePos = sum(take(phrases, currentPhrase).map((p) => p.l));\n    arrowStart = phrasePos;\n    for (let i = 0; i < phrase.l; i++) {\n      colors[phrasePos + i] =\n        colors[phrasePos + i] === \"none\" ? \"target\" : \"source-target\";\n    }\n  }\n\n  const shortPhrases: ShortPhraseProps[] = [];\n  const copyingPhrases: CopyingPhraseProps[] = [];\n  if (currentPhrase !== undefined) {\n    let currentPos = 0;\n    take(phrases, currentPhrase + 1).forEach((p) => {\n      if (p.type === \"literal\") {\n        shortPhrases.push({\n          x: currentPos * 30,\n          y: 90,\n          text: `(${String.fromCodePoint(p.symbol)},0)`,\n        });\n      } else if (p.l === 1) {\n        shortPhrases.push({\n          x: currentPos * 30,\n          y: 90,\n          text: `(${p.p},${p.l})`,\n        });\n      } else {\n        copyingPhrases.push({\n          x1: currentPos * 30 + 22,\n          x2: currentPos * 30 + p.l * 30 + 18,\n          y: 90,\n          ...p,\n        });\n      }\n      currentPos += p.l;\n    });\n  }\n\n  return (\n    <svg height=\"100%\" width=\"100%\">\n      <SharedDefinitions></SharedDefinitions>\n\n      {input.split(\"\").map((char, i) => (\n        <Character\n          x={i * 30 + 20}\n          y={50}\n          text={char}\n          color={colors[i]}\n        ></Character>\n      ))}\n\n      {arrowStart !== undefined && arrowTarget !== undefined && (\n        <Arrow\n          x1={arrowStart * 30 + 35}\n          x2={arrowTarget * 30 + 35}\n          y={50}\n        ></Arrow>\n      )}\n\n      {shortPhrases.map((props) => (\n        <ShortPhrase {...props}></ShortPhrase>\n      ))}\n\n      {copyingPhrases.map((props) => (\n        <CopyingPhrase {...props}></CopyingPhrase>\n      ))}\n    </svg>\n  );\n}\n","import { sum, take } from \"lodash\";\nimport React from \"react\";\nimport { RlzPhrase } from \"../algorithms/compression\";\nimport { RlzVisualizationData } from \"./common\";\nimport { CharacterColor, ShortPhraseProps, CopyingPhraseProps, Arrow, Character, CopyingPhrase, SharedDefinitions, ShortPhrase, Arrow2 } from \"./drawing\";\n\nexport interface RlzVisualizationProps {\n  data: RlzVisualizationData;\n  currentPhrase?: number;\n}\n\nexport function RlzVisualization(props: RlzVisualizationProps) {\n  const { data, currentPhrase } = props;\n  const {input, reference, phrases} = data;\n\n  const colors: CharacterColor[] = new Array(input.length).fill(\"none\");\n  const referenceColors: CharacterColor[] = new Array(reference.length).fill(\"none\");\n  let arrowStart: number | undefined;\n  let arrowTarget: number | undefined;\n  if (currentPhrase !== undefined && currentPhrase < phrases.length) {\n    const phrase = phrases[currentPhrase];\n    if (phrase.type === \"copy\") {\n      for (let i = 0; i < phrase.l; i++) {\n        referenceColors[phrase.p + i] = \"source\";\n      }\n      arrowTarget = phrase.p;\n    }\n    const phrasePos = sum(take(phrases, currentPhrase).map((p) => p.l));\n    arrowStart = phrasePos;\n    for (let i = 0; i < phrase.l; i++) {\n      colors[phrasePos + i] = \"target\"\n    }\n  }\n\n  const shortPhrases: ShortPhraseProps[] = [];\n  const copyingPhrases: CopyingPhraseProps[] = [];\n  if (currentPhrase !== undefined) {\n    let currentPos = 0;\n    take(phrases, currentPhrase + 1).forEach((p) => {\n      if (p.type === \"literal\") {\n        shortPhrases.push({\n          x: currentPos * 30,\n          y: 130,\n          text: `(${String.fromCodePoint(p.symbol)},0)`,\n        });\n      } else if (p.l === 1) {\n        shortPhrases.push({\n          x: currentPos * 30,\n          y: 130,\n          text: `(${p.p},${p.l})`,\n        });\n      } else {\n        copyingPhrases.push({\n          x1: currentPos * 30 + 22,\n          x2: currentPos * 30 + p.l * 30 + 18,\n          y: 130,\n          ...p,\n        });\n      }\n      currentPos += p.l;\n    });\n  }\n\n  return (\n    <svg height=\"200\" width=\"100%\">\n      <SharedDefinitions></SharedDefinitions>\n\n           {reference.split(\"\").map((char, i) => (\n        <Character\n          x={i * 30 + 20}\n          y={10}\n          text={char}\n          color={referenceColors[i]}\n        ></Character>\n      ))}\n\n      {input.split(\"\").map((char, i) => (\n        <Character\n          x={i * 30 + 20}\n          y={90}\n          text={char}\n          color={colors[i]}\n        ></Character>\n      ))}\n\n      {arrowStart !== undefined && arrowTarget !== undefined && (\n        <Arrow2\n          x1={arrowStart * 30 + 35}\n          x2={arrowTarget * 30 + 35}\n          y1={90}\n          y2={50}\n        ></Arrow2>\n      )}\n\n      {shortPhrases.map((props) => (\n        <ShortPhrase {...props}></ShortPhrase>\n      ))}\n\n      {copyingPhrases.map((props) => (\n        <CopyingPhrase {...props}></CopyingPhrase>\n      ))}\n    </svg>\n  );\n}\n","import { sum, take, zip } from \"lodash\";\nimport React from \"react\";\nimport { RelzVisualizationData } from \"./common\";\nimport {\n  CharacterColor,\n  ShortPhraseProps,\n  CopyingPhraseProps,\n  Arrow,\n  Character,\n  CopyingPhrase,\n  SharedDefinitions,\n  ShortPhrase,\n  Arrow2,\n} from \"./drawing\";\n\nexport interface RelzVisualizationProps {\n  data: RelzVisualizationData;\n  currentPhrase?: number;\n}\n\nexport function RelzVisualization(props: RelzVisualizationProps) {\n  const { data, currentPhrase } = props;\n  const { input, phrases, firstPassPhrases, metaSymbolPhrases } = data;\n  const finalStep = currentPhrase === data.stepsCount;\n\n  const colors: CharacterColor[] = new Array(input.length).fill(\"none\");\n  let arrowStart: number | undefined;\n  let arrowTarget: number | undefined;\n  if (currentPhrase !== undefined && currentPhrase < firstPassPhrases.length) {\n    const phrase = firstPassPhrases[currentPhrase];\n    if (phrase.type === \"copy\") {\n      for (let i = 0; i < phrase.l; i++) {\n        colors[phrase.p + i] = \"source\";\n      }\n      arrowTarget = phrase.p;\n    }\n    const phrasePos = sum(\n      take(firstPassPhrases, currentPhrase).map((p) => p.l)\n    );\n    arrowStart = phrasePos;\n    for (let i = 0; i < phrase.l; i++) {\n      colors[phrasePos + i] =\n        colors[phrasePos + i] === \"none\" ? \"target\" : \"source-target\";\n    }\n  }\n\n  const shortPhrases: ShortPhraseProps[] = [];\n  const copyingPhrases: CopyingPhraseProps[] = [];\n  if (currentPhrase !== undefined) {\n    let currentPos = 0;\n    take(firstPassPhrases, currentPhrase + 1).forEach((p) => {\n      if (p.type === \"literal\") {\n        shortPhrases.push({\n          x: currentPos * 30,\n          y: 90,\n          text: `(${String.fromCodePoint(p.symbol)},0)`,\n        });\n      } else if (p.l === 1) {\n        shortPhrases.push({\n          x: currentPos * 30,\n          y: 90,\n          text: `(${p.p},${p.l})`,\n        });\n      } else {\n        copyingPhrases.push({\n          x1: currentPos * 30 + 22,\n          x2: currentPos * 30 + p.l * 30 + 18,\n          y: 90,\n          ...p,\n        });\n      }\n      currentPos += p.l;\n    });\n  }\n\n  const mappingArrows: [number, number][] = [];\n  if (currentPhrase === firstPassPhrases.length) {\n    let currentPos = 0;\n    firstPassPhrases.forEach((p, i) => {\n      mappingArrows.push([currentPos * 30 + 35 + (p.l - 1) * 15, i * 30 + 35]);\n      currentPos += p.l;\n    });\n  }\n\n  // TODO: convert meta symbols to lower case characters?\n  const metaSymbols =\n    currentPhrase && currentPhrase >= firstPassPhrases.length\n      ? data.metaSymbols.map((s) => String(s))\n      : [];\n  const metaColors: CharacterColor[] = new Array(metaSymbols.length).fill(\n    \"none\"\n  );\n  let metaArrowStart: number | undefined;\n  let metaArrowTarget: number | undefined;\n  const currentMetaPhrase =\n    currentPhrase !== undefined && currentPhrase > firstPassPhrases.length\n      ? Math.min(\n          currentPhrase - firstPassPhrases.length - 1,\n          metaSymbolPhrases.length - 1\n        )\n      : undefined;\n  if (\n    currentPhrase !== undefined &&\n    currentMetaPhrase !== undefined &&\n    currentPhrase < firstPassPhrases.length + metaSymbolPhrases.length + 1\n  ) {\n    const phrase = metaSymbolPhrases[currentMetaPhrase];\n    if (phrase.type === \"copy\") {\n      for (let i = 0; i < phrase.l; i++) {\n        metaColors[phrase.p + i] = \"source\";\n      }\n      metaArrowTarget = phrase.p;\n    }\n    const phrasePos = sum(\n      take(metaSymbolPhrases, currentMetaPhrase).map((p) => p.l)\n    );\n    metaArrowStart = phrasePos;\n    for (let i = 0; i < phrase.l; i++) {\n      metaColors[phrasePos + i] =\n        metaColors[phrasePos + i] === \"none\" ? \"target\" : \"source-target\";\n    }\n  }\n\n  if (currentMetaPhrase !== undefined) {\n    let currentPos = 0;\n    take(metaSymbolPhrases, currentMetaPhrase + 1).forEach((p, i) => {\n      if (p.type === \"literal\") {\n        shortPhrases.push({\n          x: currentPos * 30,\n          y: 300,\n          text: `(${metaSymbols[i]},0)`,\n        });\n      } else if (p.l === 1) {\n        shortPhrases.push({\n          x: currentPos * 30,\n          y: 300,\n          text: `(${p.p},${p.l})`,\n        });\n      } else {\n        copyingPhrases.push({\n          x1: currentPos * 30 + 22,\n          x2: currentPos * 30 + p.l * 30 + 18,\n          y: 300,\n          ...p,\n        });\n      }\n      currentPos += p.l;\n    });\n  }\n\n  const backMappingArrows: [number, number][] = [];\n  if (currentPhrase !== undefined && currentPhrase === data.stepsCount) {\n    let currentPos = 0;\n    let currentMetaPos = 0;\n    zip(phrases, metaSymbolPhrases).forEach(([p, metaP], i) => {\n      if (p && metaP) {\n        if (p.type === \"literal\") {\n          shortPhrases.push({\n            x: currentPos * 30,\n            y: 145,\n            text: `(${String.fromCodePoint(p.symbol)},0)`,\n          });\n        } else if (p.l === 1) {\n          shortPhrases.push({\n            x: currentPos * 30,\n            y: 145,\n            text: `(${p.p},${p.l})`,\n          });\n        } else {\n          copyingPhrases.push({\n            x1: currentPos * 30 + 22,\n            x2: currentPos * 30 + p.l * 30 + 18,\n            y: 145,\n            ...p,\n          });\n        }\n\n        backMappingArrows.push([\n          currentMetaPos * 30 + 35 + (metaP.l - 1) * 15,\n          currentPos * 30 + 35 + +(p.l - 1) * 15,\n        ]);\n\n        currentPos += p.l;\n        currentMetaPos += metaP?.l;\n      }\n    });\n  }\n\n  return (\n    <svg height=\"500\" width=\"100%\">\n      <SharedDefinitions></SharedDefinitions>\n\n      {input.split(\"\").map((char, i) => (\n        <Character\n          x={i * 30 + 20}\n          y={50}\n          text={char}\n          color={colors[i]}\n        ></Character>\n      ))}\n\n      {arrowStart !== undefined && arrowTarget !== undefined && (\n        <Arrow\n          x1={arrowStart * 30 + 35}\n          x2={arrowTarget * 30 + 35}\n          y={50}\n        ></Arrow>\n      )}\n\n      {shortPhrases.map((props) => (\n        <ShortPhrase {...props}></ShortPhrase>\n      ))}\n\n      {copyingPhrases.map((props) => (\n        <CopyingPhrase {...props}></CopyingPhrase>\n      ))}\n\n      {mappingArrows.map(([x1, x2]) => (\n        <Arrow2 x1={x1} y1={130} x2={x2} y2={259} straight></Arrow2>\n      ))}\n\n      {metaSymbols.map((char, i) => (\n        <Character\n          x={i * 30 + 20}\n          y={260}\n          text={char}\n          color={metaColors[i]}\n        ></Character>\n      ))}\n\n      {metaArrowStart !== undefined && metaArrowTarget !== undefined && (\n        <Arrow\n          x1={metaArrowStart * 30 + 35}\n          x2={metaArrowTarget * 30 + 35}\n          y={260}\n        ></Arrow>\n      )}\n\n      {finalStep && (\n        <line\n          x1=\"20\"\n          y1=\"132\"\n          x2={input.length * 30 + 20}\n          y2=\"132\"\n          stroke=\"black\"\n        />\n      )}\n      {finalStep && (\n        <line\n          x1=\"20\"\n          y1=\"135\"\n          x2={input.length * 30 + 20}\n          y2=\"135\"\n          stroke=\"black\"\n        />\n      )}\n\n      {backMappingArrows.map(([x1, x2]) => (\n        <Arrow2 x1={x1} y1={260} x2={x2} y2={220} straight></Arrow2>\n      ))}\n    </svg>\n  );\n}\n","import React, { useEffect, useState } from \"react\";\nimport Row from \"react-bootstrap/Row\";\nimport Col from \"react-bootstrap/Col\";\nimport {\n  compressLz77,\n  compressWithSlidingWindow,\n  Phrase,\n  RlzPhrase,\n} from \"./algorithms/compression\";\nimport { stringToCodePoints } from \"./algorithms/utils\";\nimport Button from \"react-bootstrap/Button\";\nimport Card from \"react-bootstrap/Card\";\nimport Form from \"react-bootstrap/Form\";\nimport { availableCompressors, CompressorType } from \"./compressors\";\nimport { mapValues, sum, take, values } from \"lodash\";\nimport { string } from \"fast-check\";\nimport { Lz77Visualization } from \"./visualizations/Lz77Visualization\";\nimport { computeData } from \"./visualizations/common\";\nimport { RlzVisualization } from \"./visualizations/RlzVisualization\";\nimport { RelzVisualization } from \"./visualizations/RelzVisualization\";\n\nexport default function Slides() {\n  const [input, setInput] = useState(\"ABCCDBCCABDD\");\n\n  const [visible, setVisible] = useState(false);\n  const [current, setCurrent] = useState<number | undefined>();\n\n  const [selectedCompressor, setSelectedCompressor] = useState<CompressorType>(\n    \"lz77\"\n  );\n  const currentCompressor = availableCompressors[selectedCompressor];\n  const [referenceString, setReferenceString] = useState(\"\");\n  const [windowSize, setWindowSize] = useState(5);\n  const [prefixSize, setPrefixSize] = useState(5);\n  const [recursionLimit, setRecursionLimit] = useState(5);\n\n  const data = computeData(selectedCompressor, input, {\n    reference: referenceString,\n    windowSize,\n    prefixSize,\n    recursionLimit,\n  });\n  useEffect(() => {\n    if (current !== undefined && data !== undefined) {\n      setCurrent(Math.min(data?.stepsCount, current));\n    }\n  }, [data, data?.stepsCount, current]);\n  return (\n    <>\n      <Row className=\"mt-5\">\n        <Col>\n          <Card>\n            <Card.Header>Settings</Card.Header>\n            <Card.Body>\n              <Form>\n                <Form.Group>\n                  <Form.Label>Input String</Form.Label>\n                  <Form.Control\n                    value={input}\n                    onChange={(e) => setInput(e.target.value)}\n                  />\n                </Form.Group>\n                <Form.Row>\n                  <Col>\n                    <Form.Group>\n                      <Form.Label>Compression Algorithm</Form.Label>\n                      {values(availableCompressors).map((c) => (\n                        <Form.Check\n                          label={c.title}\n                          name=\"compressor-group\"\n                          type=\"radio\"\n                          checked={selectedCompressor === c.type}\n                          onChange={() => setSelectedCompressor(c.type)}\n                        />\n                      ))}\n                    </Form.Group>\n                  </Col>\n                  <Col>\n                    {currentCompressor.needsReference && (\n                      <Form.Group key=\"reference-string\">\n                        <Form.Label>Reference</Form.Label>\n                        <Form.Control\n                          placeholder=\"Reference String\"\n                          value={referenceString}\n                          onChange={(e) => setReferenceString(e.target.value)}\n                        />\n                      </Form.Group>\n                    )}\n                    {currentCompressor.needsPrefixSize && (\n                      <Form.Group>\n                        <Form.Label>Prefix Size</Form.Label>\n                        <Form.Control\n                          type=\"number\"\n                          value={prefixSize}\n                          onChange={(e) =>\n                            setPrefixSize(parseInt(e.target.value))\n                          }\n                        />\n                      </Form.Group>\n                    )}\n                    {currentCompressor.needsWindowSize && (\n                      <Form.Group>\n                        <Form.Label>Window Size</Form.Label>\n                        <Form.Control\n                          type=\"number\"\n                          value={windowSize}\n                          onChange={(e) =>\n                            setWindowSize(parseInt(e.target.value))\n                          }\n                        />\n                      </Form.Group>\n                    )}\n                    {currentCompressor.needsRecursionLimit && (\n                      <Form.Group>\n                        <Form.Label>Recursion Limit</Form.Label>\n                        <Form.Control\n                          type=\"number\"\n                          value={recursionLimit}\n                          onChange={(e) =>\n                            setRecursionLimit(parseInt(e.target.value))\n                          }\n                        />\n                      </Form.Group>\n                    )}\n                  </Col>\n                </Form.Row>\n              </Form>\n            </Card.Body>\n          </Card>\n        </Col>\n      </Row>\n      <Row className=\"mt-5\">\n        <Col>\n          <Card>\n            <Card.Body>\n              {data?.type === \"lz77\" && (\n                <Lz77Visualization\n                  data={data}\n                  currentPhrase={current}\n                ></Lz77Visualization>\n              )}\n              {data?.type === \"rlz\" && (\n                <RlzVisualization\n                  data={data}\n                  currentPhrase={current}\n                ></RlzVisualization>\n              )}\n              {data?.type === \"relz\" && (\n                <RelzVisualization\n                  data={data}\n                  currentPhrase={current}\n                ></RelzVisualization>\n              )}\n            </Card.Body>\n          </Card>\n        </Col>\n      </Row>\n      <Row>\n        <Col md=\"1\">\n          <Button\n            disabled={\n              current !== undefined && current >= (data?.stepsCount ?? 0)\n            }\n            onClick={() => setCurrent(current === undefined ? 0 : current + 1)}\n          >\n            Next\n          </Button>\n        </Col>\n        <Col md=\"1\">\n          <Button\n            disabled={current === undefined}\n            onClick={() =>\n              setCurrent(\n                current === undefined || current === 0 ? undefined : current - 1\n              )\n            }\n          >\n            Previous\n          </Button>\n        </Col>\n        <Col>Step {current} / {data?.stepsCount}</Col>\n      </Row>\n    </>\n  );\n}\n","import {\n  compressLz77,\n  compressRelz,\n  compressRlz,\n  Phrase,\n  RlzPhrase,\n} from \"../algorithms/compression\";\nimport { stringToCodePoints } from \"../algorithms/utils\";\nimport { CompressorType } from \"../compressors\";\n\nexport interface Lz77VisualizationData {\n  type: \"lz77\";\n  input: string;\n  phrases: Phrase[];\n  stepsCount: number;\n}\n\nexport interface RlzVisualizationData {\n  type: \"rlz\";\n  input: string;\n  reference: string;\n  phrases: RlzPhrase[];\n  stepsCount: number;\n}\n\nexport interface RelzVisualizationData {\n  type: \"relz\";\n  input: string;\n  prefixLength: number;\n  firstPassPhrases: Phrase[];\n  metaSymbols: number[];\n  metaSymbolPhrases: Phrase[];\n  phrases: Phrase[];\n  stepsCount: number;\n}\n\nexport type VisualizationData =\n  | Lz77VisualizationData\n  | RlzVisualizationData\n  | RelzVisualizationData;\n\ninterface Settings {\n  windowSize: number;\n  prefixSize: number;\n  reference: string;\n  recursionLimit: number;\n}\n\nexport function computeData(\n  type: CompressorType,\n  input: string,\n  settings: Settings\n): VisualizationData | undefined {\n  const codePoints = stringToCodePoints(input);\n  if (type === \"lz77\") {\n    const phrases = [...compressLz77(codePoints)];\n    return { type: \"lz77\", input, phrases, stepsCount: phrases.length };\n  } else if (type === \"rlz\") {\n    const { reference } = settings;\n    const referenceCodePoints = stringToCodePoints(reference);\n    const phrases = [...compressRlz(codePoints, referenceCodePoints)];\n    return {\n      type: \"rlz\",\n      input,\n      reference,\n      phrases,\n      stepsCount: phrases.length,\n    };\n  } else if (type === \"relz\") {\n    const result = compressRelz(codePoints, settings.prefixSize);\n    return {\n      type: \"relz\",\n      input,\n      prefixLength: settings.prefixSize,\n      ...result,\n      stepsCount: result.firstPassPhrases.length + result.metaSymbolPhrases.length + 2,\n    };\n  }\n}\n","import React, { useState } from \"react\";\nimport Container from \"react-bootstrap/Container\";\nimport { Link, Route, Switch } from \"react-router-dom\";\nimport { Compare } from \"./Compare\";\nimport Slides from \"./Slides\";\nimport Navbar from \"react-bootstrap/Navbar\";\nimport Nav from \"react-bootstrap/Nav\";\n\nfunction App() {\n  return (\n    <>\n      <Navbar bg=\"dark\" variant=\"dark\">\n        <Container>\n          <Navbar.Brand href=\"#home\">Lempel-Ziv Playground</Navbar.Brand>\n          <Nav className=\"mr-auto\">\n            <Nav.Link to=\"/slides\" as={Link}>Slides</Nav.Link>\n            <Nav.Link to=\"/compare\" as={Link}>Compare</Nav.Link>\n            <Nav.Link href=\"#pricing\">Pricing</Nav.Link>\n          </Nav>\n          {/* <Form inline>\n          <FormControl type=\"text\" placeholder=\"Search\" className=\"mr-sm-2\" />\n          <Button variant=\"outline-info\">Search</Button>\n        </Form> */}\n        </Container>\n      </Navbar>\n      <Container>\n        <Switch>\n          <Route exact path=\"/compare\">\n            <Compare></Compare>\n          </Route>\n          <Route exact path=\"/slides\">\n            <Slides></Slides>\n          </Route>\n        </Switch>\n      </Container>\n    </>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import \"bootstrap/dist/css/bootstrap.min.css\";\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport { HashRouter } from \"react-router-dom\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <HashRouter basename=\"/lempel-ziv\">\n      <App />\n    </HashRouter>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}